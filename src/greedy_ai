#name of snake memory
MY_MEM='greedy'
@board_h=nil
@board_w=nil
@my_x=nil
@my_y=nil

def main(input)
  #Check if initializing or passing snake data
  if input[0]=='-i' then
    #initialize
    init(input[1])
  elsif input[0]=='-s'
    #handle snakes
    greedy(input[1..-1])
  end
end


def init(player_ID)
  #store player_ID
  File.write(MY_MEM+player_ID+".mem", "1")
end

def initialized?(player_ID)
  #checks if input player ID matches the player ID I have stored in memory
  #returns boolean
  store=File.open(MY_MEM+player_ID.to_s+".mem") {|f| f.readline}.to_i
  store.to_i ? true:false
end

def greedy(input)
  #Step 1: get player id
  my_id=input[0].to_i

  #Step 2: get number of snakes
  @board_w, @board_h, num_snakes=input[1].split(',').map(&:to_i)

  #Step 3: get food location
  food_x,food_y=input[2].split(',').map(&:to_i)

  #Step 4: parse snake location data
  puts "INPUT: "
  p input
  for i in 0...num_snakes do
    rhumba||=[]
    arr=input[i+3].split(',').map(&:to_i)
    x_coord=[]
    y_coord=[]
    player_ID=arr.shift.to_i
    alive_dead=arr.shift.to_i ? "alive":"dead"
    score=arr.shift
    arr.each_with_index { |v,i| (i.odd? ? y_coord : x_coord) << v }
    if player_ID==my_id and initialized?(player_ID) then
      puts "My ID: #{player_ID}"
      @my_x=x_coord
      @my_y=y_coord
      my_status=alive_dead
      my_score=score
    end
  end

  #Step 5: Greedy Algorithm
  if (@my_x.first>food_x)
    go_left
  elsif (@my_x.first<food_x)
    go_right
  elsif (@my_y.first>food_y)
    go_down
  elsif (@my_y.first<food_y)
    go_up
  else
    print "wut"
  end

end

def go_up
  if not(in_snake("up")) and @my_y.first+1 < @board_h
    print "up"
  else
    choice=rand(2)
    if choice==1
      go_right
    else
      go_left
    end
  end
end

def go_down
  if not(in_snake("down")) and @my_y.first-1 > 0
    print "down"
  else
    choice=rand(2)
    if choice==1
      go_left
    else
      go_right
    end
  end
end

def go_right
  if not(in_snake("right")) and @my_x.first+1 < @board_w
    print "right"
  else
    choice=rand(2)
    if choice==1
      go_down
    else
      go_up
    end
  end
end

def go_left
  if not(in_snake("left")) and @my_x.first-1 > 0
    print "left"
  else
    choice=rand(2)
    if choice==1
      go_up
    else
      go_down
    end
  end
end

def in_snake(direction)
  case direction
    when 'left'
      @my_x.size.times do |i|
        if @my_x[i] == @my_x.first-1 and @my_y[i] == @my_y.first
          return true
        end
      end
    when 'right'
      @my_x.size.times do |i|
        if @my_x[i] == @my_x.first+1 and @my_y[i] == @my_y.first
          return true
        end
      end
    when 'up'
      @my_x.size.times do |i|
        if @my_x[i] == @my_x.first and @my_y[i] == @my_y.first+1
          return true
        end
      end
    when 'down'
      @my_x.size.times do |i|
        if @my_x[i] == @my_x.first and @my_y[i] == @my_y.first-1
          return true
        end
      end
  end
  return false
end

if __FILE__ == $0
  main(ARGV)
end